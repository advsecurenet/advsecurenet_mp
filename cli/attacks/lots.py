from typing import Tuple

import click
import torch
from tqdm.auto import tqdm

from advsecurenet.attacks.lots import LOTS
from advsecurenet.utils.adversarial_target_generator import \
    AdversarialTargetGenerator
from cli.types.attacks.lots import LOTSAttackCLIConfig
from cli.utils.data import get_custom_data


class CLILOTSAttack:
    """
    Class representing the CLI-based LOTS attack.

    Args:
        config (LOTSAttackCLIConfig): The configuration for the LOTS attack.
        model (torch.nn.Module): The target model to be attacked.
        dataset (torch.utils.data.Dataset): The dataset used for the attack.
        data_loader (torch.utils.data.DataLoader): The data loader for the dataset.

    Attributes:
        _config (LOTSAttackCLIConfig): The configuration for the LOTS attack.
        _dataset (torch.utils.data.Dataset): The dataset used for the attack.
        _data_loader (torch.utils.data.DataLoader): The data loader for the dataset.
        _model (torch.nn.Module): The target model to be attacked.
        _adversarial_target_generator (AdversarialTargetGenerator): The generator for adversarial target images.

    Methods:
        execute_attack(): Entry point for the LOTS attack execution on the CLI.
        _validate_config(): Validation function for the LOTS attack configuration.
        _generate_target_images(data, labels): Generate target images for adversarial attacks.
        _perform_attack(attack, target_images, target_labels): Perform the LOTS attack.
    """

    def __init__(self,
                 config: LOTSAttackCLIConfig,
                 model: torch.nn.Module,
                 dataset: torch.utils.data.Dataset,
                 data_loader: torch.utils.data.DataLoader,
                 ) -> None:
        """
        Initializes a new instance of the CLILOTSAttack class.

        Args:
            config (LOTSAttackCLIConfig): The configuration for the LOTS attack.
            model (torch.nn.Module): The target model to be attacked.
            dataset (torch.utils.data.Dataset): The dataset used for the attack.
            data_loader (torch.utils.data.DataLoader): The data loader for the dataset.
        """
        self._config = config
        self._validate_config()
        self._dataset = dataset
        self._data_loader = data_loader
        self._model = model
        self._adversarial_target_generator = AdversarialTargetGenerator()

    def execute_attack(self) -> torch.Tensor:
        """
        Entry point for the LOTS attack execution on the CLI.

        Returns:
            torch.Tensor: The adversarial images generated by the attack.
        """
        images = self._dataset.tensors[0]
        labels = self._dataset.tensors[1]

        # Generate target images
        target_images, target_labels = self._generate_target_images(
            data=images,
            labels=labels
        )

        attack = LOTS(self._config)

        return self._perform_attack(attack, target_images, target_labels)

    def _validate_config(self):
        """
        Validation function for the LOTS attack configuration.

        Raises:
            click.BadParameter: If the deep feature layer or target images directory is not provided.
        """
        if not self._config.deep_feature_layer:
            raise click.BadParameter(
                "Please provide the deep feature layer for the LOTS attack!")
        if not self._config.auto_generate_target_images and not self._config.target_images_dir:
            raise click.BadParameter(
                "Please provide either the target images directory or set auto_generate_target_images to true!")

    def _generate_target_images(self,
                                data: torch.Tensor,
                                labels: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Generate target images for adversarial attacks.

        If the `target_images_dir` is specified in the configuration, it tries to load custom target images from the directory.
        If loading fails, it raises a `ValueError` with the error details.

        If `auto_generate_target_images` is set to `True` in the configuration, it uses the adversarial target generator to
        automatically generate target images based on the input data and labels. It returns the generated target images and labels.

        Args:
            data (torch.Tensor): The input data for generating target images.
            labels (torch.Tensor): The labels corresponding to the input data.

        Returns:
            Tuple[torch.Tensor, torch.Tensor]: A tuple containing the generated target images and labels.

        Raises:
            ValueError: If there is an error loading the target images.
        """
        if self._config.target_images_dir:
            try:
                return get_custom_data(self._config.target_images_dir)
            except Exception as e:
                raise ValueError(f"Error loading target images! Details: {e}")

        elif self._config.auto_generate_target_images:
            paired = self._adversarial_target_generator.generate_target_images(
                zip(data, labels), total_tries=self._config.maximum_generation_attempts)
            _, _, target_images, target_labels = self._adversarial_target_generator.extract_images_and_labels(
                paired=paired,
                images=data,
                device=self._config.device.device
            )

            return target_images, target_labels

    def _perform_attack(self,
                        attack: LOTS,
                        target_images: torch.Tensor,
                        target_labels: torch.Tensor
                        ) -> torch.Tensor:
        """
        Perform the LOTS attack.

        Args:
            attack (LOTS): The attack method to be used.
            target_images (torch.Tensor): The target images for the attack.
            target_labels (torch.Tensor): The target labels for the attack.

        Returns:
            torch.Tensor: The adversarial images generated by the attack.
        """
        adversarial_images, successful_attacks, total_samples = [], 0, 0

        for images, labels in tqdm(self._data_loader, desc="Generating adversarial samples"):
            batch_size = images.size(0)
            target_images_batch, target_labels_batch = target_images[total_samples:total_samples +
                                                                     batch_size], target_labels[total_samples:total_samples + batch_size]

            images, labels, target_images_batch, target_labels_batch = [
                x.to(self._config.device.device) for x in [images, labels, target_images_batch, target_labels_batch]]

            adversarial_batch, _ = attack.attack(
                model=self._model,
                data=images,
                target=target_images_batch,
                target_classes=target_labels_batch)

            adversarial_preds = torch.argmax(
                self._model(adversarial_batch), dim=1)

            successful_attacks += (adversarial_preds ==
                                   target_labels_batch).sum().item()

            adversarial_images.append(adversarial_batch)
            total_samples += batch_size
            click.echo(
                f"Attack success rate: {successful_attacks / total_samples * 100:.2f}%")

        success_rate = (successful_attacks / total_samples) * 100
        print(
            f"Succesfully generated adversarial samples! Attack success rate: {success_rate:.2f}%")
        return adversarial_images
