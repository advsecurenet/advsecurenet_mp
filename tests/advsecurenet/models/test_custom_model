import importlib
import os
from unittest.mock import MagicMock, patch

import pytest

from advsecurenet.models.base_model import BaseModel
from advsecurenet.models.custom_model import CustomModel
from advsecurenet.shared.types.configs.model_config import CustomModelConfig


class MockCustomModel:
    def __init__(self, num_classes, num_input_channels, **kwargs):
        self.num_classes = num_classes
        self.num_input_channels = num_input_channels


@pytest.fixture
def custom_model_config():
    return CustomModelConfig(
        custom_models_path='CustomModels',
        model_name='MockCustomModel',
        num_classes=10,
        num_input_channels=3
    )


@pytest.mark.advsecurenet
@pytest.mark.essential
@patch('importlib.import_module')
def test_load_model(mock_import_module, custom_model_config):
    mock_module = MagicMock()
    mock_module.MockCustomModel = MockCustomModel
    mock_import_module.return_value = mock_module

    model = CustomModel(custom_model_config)
    model.load_model()

    assert isinstance(model.model, MockCustomModel)
    assert model.model.num_classes == custom_model_config.num_classes
    assert model.model.num_input_channels == custom_model_config.num_input_channels


@pytest.mark.advsecurenet
@pytest.mark.essential
def test_load_model_class_not_found(custom_model_config):
    with patch('importlib.import_module') as mock_import_module:
        mock_module = MagicMock()
        del mock_module.MockCustomModel
        mock_import_module.return_value = mock_module

        model = CustomModel(custom_model_config)
        with pytest.raises(ValueError, match="Model class MockCustomModel not found in module"):
            model.load_model()


@pytest.mark.advsecurenet
@pytest.mark.essential
@patch('os.path.isdir', return_value=True)
@patch('os.listdir', return_value=['MockCustomModel.py', '__init__.py'])
def test_models(mock_listdir, mock_isdir, custom_model_config):
    models = CustomModel.models()
    assert 'MockCustomModel' in models
    assert '__init__' not in models


@pytest.mark.advsecurenet
@pytest.mark.essential
def test_available_weights_not_implemented(custom_model_config):
    model = CustomModel(custom_model_config)
    with pytest.raises(NotImplementedError, match="This method is not applicable for custom models."):
        model.available_weights('MockCustomModel')
